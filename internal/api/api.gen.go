// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Operation.
const (
	Divide   Operation = "/"
	Minus    Operation = "-"
	Multiply Operation = "*"
	Plus     Operation = "+"
)

// Defines values for Status.
const (
	Accepted   Status = "accepted"
	Error      Status = "error"
	Processing Status = "processing"
	Success    Status = "success"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Error with details
	Errors *string `json:"errors,omitempty"`
}

// Expression defines model for Expression.
type Expression struct {
	// Id Expression ID
	Id     *openapi_types.UUID `json:"id,omitempty"`
	Result *Result             `json:"result"`
	Status *Status             `json:"status,omitempty"`
}

// ExpressionAccepted defines model for ExpressionAccepted.
type ExpressionAccepted struct {
	// Id ID expression accepted to calculate
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// ExpressionRequest defines model for ExpressionRequest.
type ExpressionRequest struct {
	// Expression Expression to calculate
	Expression *string `json:"expression,omitempty"`
}

// ExpressionsList defines model for ExpressionsList.
type ExpressionsList struct {
	Expressions *[]Expression `json:"expressions,omitempty"`
}

// GetTaskResponse defines model for GetTaskResponse.
type GetTaskResponse struct {
	// Arg1 The left operand
	Arg1 *float32 `json:"arg1,omitempty"`

	// Arg2 The right operand
	Arg2 *float32 `json:"arg2,omitempty"`

	// Id Task ID
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Operation *Operation          `json:"operation,omitempty"`

	// OperationTime Time at which the task occurred
	OperationTime *int `json:"operation_time,omitempty"`
}

// Operation defines model for Operation.
type Operation string

// PostTaskResultRequest defines model for PostTaskResultRequest.
type PostTaskResultRequest struct {
	// Id Task ID
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Result Task result
	Result *float32 `json:"result,omitempty"`
}

// PostTaskResultResponse defines model for PostTaskResultResponse.
type PostTaskResultResponse struct {
	Status *string `json:"status,omitempty"`
}

// Result defines model for Result.
type Result = float32

// Status defines model for Status.
type Status string

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	Status *Status `json:"status,omitempty"`
}

// PostApiV1CalculateJSONRequestBody defines body for PostApiV1Calculate for application/json ContentType.
type PostApiV1CalculateJSONRequestBody = ExpressionRequest

// PostInternalTaskJSONRequestBody defines body for PostInternalTask for application/json ContentType.
type PostInternalTaskJSONRequestBody = PostTaskResultRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send expression to calculate
	// (POST /api/v1/calculate)
	PostApiV1Calculate(w http.ResponseWriter, r *http.Request)
	// Get list of expression
	// (GET /api/v1/expressions)
	GetApiV1Expressions(w http.ResponseWriter, r *http.Request)
	// Get list of expression
	// (GET /api/v1/expressions/{id})
	GetApiV1ExpressionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get task (part of expression) to calculate
	// (GET /internal/task)
	GetInternalTask(w http.ResponseWriter, r *http.Request)
	// Post task calculate result
	// (POST /internal/task)
	PostInternalTask(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Send expression to calculate
// (POST /api/v1/calculate)
func (_ Unimplemented) PostApiV1Calculate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of expression
// (GET /api/v1/expressions)
func (_ Unimplemented) GetApiV1Expressions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of expression
// (GET /api/v1/expressions/{id})
func (_ Unimplemented) GetApiV1ExpressionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task (part of expression) to calculate
// (GET /internal/task)
func (_ Unimplemented) GetInternalTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Post task calculate result
// (POST /internal/task)
func (_ Unimplemented) PostInternalTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostApiV1Calculate operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Calculate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Calculate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1Expressions operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Expressions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Expressions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1ExpressionsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ExpressionsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ExpressionsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInternalTask operation middleware
func (siw *ServerInterfaceWrapper) GetInternalTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInternalTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostInternalTask operation middleware
func (siw *ServerInterfaceWrapper) PostInternalTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInternalTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/calculate", wrapper.PostApiV1Calculate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/expressions", wrapper.GetApiV1Expressions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/expressions/{id}", wrapper.GetApiV1ExpressionsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/internal/task", wrapper.GetInternalTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/internal/task", wrapper.PostInternalTask)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX32/bNhD+V4jbHvaDrewse9FbuxSBgRUtkm4vQTAw0tlmK5EaeXRrBP7fh6NsWbHp",
	"H1kbL3uKIx153913993pHgpbN9agIQ/5PfhiirWKP984Z90V+sYaj/ygcbZBRxrja+TX8VeJvnC6IW0N",
	"5O0x8VnTVJRISlceJNC8QcjBk9NmAotF98TefcSCYCHhzZfGoffxkk1fukz46ezF6AIkjK2rFUEOIehy",
	"26UEhz5UxBd973AMOXyXrWPPloFnV63VQoInRcEfsr9urQ6E9KoosCEsjwttdCFwHZ1anhVkRaGqIlSK",
	"8HDA+wFd4d8BPSVofUDDzpRvYHmUb/+73u+5TQxhfTD7vaJZ+1TOqXkaxCXSB+U/7a5q5SbD7cA/TFFU",
	"OCbBpsqU/eyPK6tonQIT6jt07Eu5yVn6Kqcn08fdlaoSDuTI0o+uaMnpvny+6wz7p/4iXWMCgK5RKBKf",
	"p7qYCpqiIIZkiyI4hz0g2hBOOJAUJe/62NCEGvIbeAESfgYJP4GEDG43Q5Lw5QWbvpgpZ1TN1N3AW20C",
	"a837Kv55GyrSTTUHCRd6pkuE24WE99avKiBUtLMLvjLfa6lJXLF8eZj2VLY28e+q47V4lThWEQzYT8d1",
	"6lWHfguhCVWl7iqEnFzARKFed35XVK7kCyRDLLhbI4M+FPwPyHaSbJPc3XZMlP9OovmRNmPLN5Amjgsu",
	"NPu/C6y4ncQJj26mC5a6GbpWHWH4cvBysGwUoxoNOfwSH0loFE0jrkw1OpsNs7VYchC2rbmuwUYl5JHa",
	"V43+c/hbT1hdW6GvbTnnE4U1hCYeVk1T6SIezz76tn3aiI8XzVX9x0SwK819G7ltqzjmPQZyNhg+AYBu",
	"LkYEO6eNwwL1jM0knA8G3w7IgxUngeG1KkWXJAnnZ2en8/2HWfYLN1xvIWAgv54yCSND6IyqYhOgE22/",
	"sp0Pda3cHHK4RlP2l5YH+wGbrhphY8pPMNEJl9g2Qm9lgK1yHDxBObabSSIF/FzY8XNn4RJJVAmo6fxn",
	"97pcPIaEURRx5VSNhLz739yDZmwsdzwdVB3HfQmbaiJ7WTi0t95+JdX79tljd8n0qNipT+0cEsqUq+ke",
	"her8dNXRA2MsibENpvzflahens94j9xXmCtHvAk9pTJsfi4kYl6udP35dELao/fnT3j8LvihUW6D9h83",
	"5oTcsxptcf7tF6P0x8GJl6MdG/7u0vtP9Ga78E66G/VC9xHGTFX6edY/89k2wPprYkXaYrH4JwAA//8X",
	"U0KrgRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
